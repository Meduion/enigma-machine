// Assignment code here

/* Pseudo-Code for inputs
- define acceptable inputs: lower case, uppercase, numbers, symbols
    * create object with all items in it
- define length: minimum 8, maximum 128
    * abort process if user doesn't fulfil parameters
- create prompts for user to select desired criteria
- when user inputs criteria validate and include selected criteria
*/

/* Pseudo Code for outputs
- Create output of password based on user inputs
  1) Only lowercase
  2) lowercase and uppercase
  3) lowercase and numbers
  4) lowercase and symbols
  5) lowercase and uppercase and numbers
  6) lowercase and uppercase and symbols
  7) lowercase and uppercase and numbers and symbols
  7) only uppercase
  9) uppercase and numbers
  10) uppercase and symbols
  11) uppercase and numbers and symbols
  12) 0nly numbers
  13) numbers and symbols
  14) only symbols
- 14 different if statements? Can it be cleaner?
- how to access returned data from function userInput ();? Turn it into object?
- function to take returned user inputs and create output
*/


var characters = {
  lowerCase: "abcdefghijklmnopqrstuvwxyz",
  upperCase: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  numbers: "1234567890",
  symbols: "!@#$%^&*()"
};

function userInput () {
  // This converts user input into a number, if user doesn't enter a number the process is ended and they're informed why. The number.isNaN method was suggested by a tutor on the Ask BCS service on Slack.
  var length = parseInt(prompt("Select number of characters between 8 and 128 for password."));
  if (Number.isNaN(length)) {
    alert("Number of characters must be a number value.");
    return null;
  };
  // Password length must be minimum 8 characters, if not process is ended and user is informed why.
  if (length < 8) {
    alert("Password must be at least 8 characters.");
    return null;
  };
  // Password length must be no more than 128 characters, if not process is ended and user is informed why.
  if (length > 128) {
    alert("Password must be at least 8 characters.");
    return null;
  };
  // Following section confirms what kinds of input user wishes to include.
  var lower = confirm("Click OK to confirm including lower case letters.");
  var upper = confirm("Click OK to confirm including upper case letters.");
  var numbers = confirm("Click OK to confirm including numbers.");
  var symbols = confirm("Click OK to confirm including the symbols on keys 1 to 0");
  // If user doesn't select any input criteria process is ended and user is informed why.
  if (!lower && !upper && !numbers && !symbols) {
    alert("Password must have input criteria!");
    return null;
  };
  // Input data is collected in an array so it can be accessed in following steps.
  return [lower, upper, numbers, symbols, length];
}

function generatePassword() {
// Following variable determines what result will include based on user input, drawing from array generated by function userInput (). Idea of using += rather than multiple if statements suggested by Assistant Instructor Daniel Ceballos.
  var options = userInput();
  // console.log(options);
  var criteria = "";
  if (options[0]) {
    criteria += characters.lowerCase;
  } 
  if (options[1]) {
    criteria += characters.upperCase;
  }
  if (options[2]) {
    criteria += characters.numbers;
  }
  if (options[3]) {
    criteria += characters.symbols;
  }
  // console.log(criteria)
// Following function suggested by Programiz website found at https://www.programiz.com/javascript/examples/generate-random-strings . Substituted properties I'd already created into example rather than creating superflous new variables.
  function passwordRandomize (length) {
    var result = '';
    for (var i = 0; i < length; i++) {
      result += criteria.charAt(Math.floor(Math.random() * criteria.length));
    }
    return result;
  }
// Final returned result draws on length property of options variable created from the userInput function to ensure password is the correct length.
return passwordRandomize (options[4])
}

// Get references to the #generate element
var generateBtn = document.querySelector("#generate");

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector("#password");

  passwordText.value = password;

}

// Add event listener to generate button
generateBtn.addEventListener("click", writePassword);
